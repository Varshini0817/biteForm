<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Feedback Form</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    
    <style>
       
        body, html {
            height: 100%;
            margin: 0;
        }

        body.default-background {
            background-image: url('https://wallpapertag.com/wallpaper/full/4/5/7/965723-free-download-funny-background-images-1920x1200.jpg');
            background-repeat: no-repeat;
            background-size: contain; /* Adjust as needed */
            background-position: center;
        }
      
        .nav-tabs .nav-link.active {
            background-color: #007bff;
            color: white;
        }
        .disabled {
            pointer-events: none;
            opacity: 0.5;
        }
        .green-tab {
            background-color: rgb(24, 247, 24);
            color: rgb(0, 0, 0);
            padding: 6px; /* Add some padding for better spacing */
            border-radius: 5px; /* Round the corners for a smoother look */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add a subtle shadow for depth */
            margin-right: 5px;
            transition: background-color 0.3s ease; /* Smooth transition effect */
        }
        
        #logout-tab {
            background-color: #dc3545; /* Red background for the logout tab */
            color: white; /* White text color */
            padding: 7px;
            border-radius: 3px;
            transition: background-color 0.3s ease, color 0.3s ease; /* Smooth transition effect */
        }

        /* Hover effect for the logout tab */
        #logout-tab:hover {
            background-color: #c82333; /* Darker red on hover */
            color: white; /* Ensure text remains readable */
        }
          @media screen and (max-width: 700px) {
            body.default-background{
                background-image: url('https://wallpaperboat.com/wp-content/uploads/2019/06/funny-20.jpg');
            }
            .green-tab {
            background-color: rgb(24, 247, 24);
            text-align: center;
            color: rgb(0, 0, 0);
            padding: 6px; /* Add some padding for better spacing */
            border-radius: 5px; /* Round the corners for a smoother look */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add a subtle shadow for depth */
            transition: background-color 0.3s ease; /* Smooth transition effect */
        }
           .nav-tabs .nav-link.active {
            background-color: #007bff;
            color: rgb(188, 126, 126);
            text-align: center;
        }
        .nav-link .disabled{
            text-align: center;
        }
            .disabled {
                pointer-events: none;
                opacity: 0.5;
                text-align: center;
            } 
             #logout-tab {
            margin-top: 5px;
            background-color: #dc3545; /* Red background for the logout tab */
            color: white; /* White text color */
            padding: 7px;
            border-radius: 3px;
            transition: background-color 0.3s ease, color 0.3s ease; /* Smooth transition effect */
        }
        }
        .modal-header {
            background-color: #f8f9fa; /* Light gray background */
        }
        .modal-title {
            color: #343a40; /* Darker text color */
        }
        .modal-body {
            padding: 20px;
        }
        #wallpaperForm {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        #wallpaperForm input[type="file"] {
            border: 1px solid #ced4da; /* Border similar to Bootstrap input */
            border-radius: 0.25rem; /* Rounded corners */
            padding: 10px;
        }
        #wallpaperForm button[type="submit"] {
            margin-bottom: 5px;
            width: 100%;
            background-color: #007bff; /* Bootstrap primary color */
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 0.25rem;
            cursor: pointer;
        }
        #wallpaperForm button[type="submit"]:hover {
            background-color: #0056b3; /* Darker shade of Bootstrap primary color */
        }
        #deleteWallpaperForm {
            display: flex;
        }

        #deleteWallpaperForm button {
            background-color: #dc3545; /* Bootstrap danger color */
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 0.25rem;
            cursor: pointer;
            width: 100%;
        }
        #deleteWallpaperForm button:hover {
            background-color: #c82333; /* Darker shade of Bootstrap danger color */
        }
        #update-wallpaper-tab{
            color: black;
            margin-right: 4px;
        }
        #update-wallpaper-tab:hover{
            color: black;
            background-color: #b7f1f1;
            margin-right: 4px;
        }
    </style>
</head>
<body>
    <!-- Error Modal -->
    <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="errorModalLabel">Error</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p style="color: red;" id="errorMessage">{{error}}</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Success Modal -->
    <div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="successModalLabel">Success</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p style="color: green;" id="successMessage">{{success}}</p>
                </div>
            </div>
        </div>
    </div>

    <nav class="navbar navbar-expand-lg navbar-light" style="background-color: #e3f2fd;">
        <div class="container-fluid">
        <a class="btn btn-light"  href="/profile/{{name}}">Hey {{name}} !!!</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a id="breakfast-tab" name="breakfast" class="nav-link disabled" href="#" data-bs-toggle="modal" data-bs-target="#feedbackModal" onclick="setSelectedTab('breakfast')">Breakfast</a>
                </li>
                <li class="nav-item">
                    <a id="lunch-tab" name="lunch" class="nav-link disabled" href="#" data-bs-toggle="modal" data-bs-target="#feedbackModal" onclick="setSelectedTab('lunch')">Lunch</a>
                </li>
                <li class="nav-item">
                    <a id="supper-tab" name="supper" class="nav-link disabled" href="#" data-bs-toggle="modal" data-bs-target="#feedbackModal" onclick="setSelectedTab('supper')">Supper</a>
                </li>
                <!-- Add Wallpaper Upload Option to the Navbar -->
                <li class="nav-item" >
                    <a id="update-wallpaper-tab" class="btn btn-outline-info" href="#" data-bs-toggle="modal" data-bs-target="#wallpaperUploadForm">Change Wallpaper</a>
                </li>
                <li class="nav-item">
                    <a id="logout-tab" style="color: white;" class="nav-link" href="#" data-bs-toggle="modal" data-bs-target="#logoutModal"><i class="fas fa-power-off fa-xs"></i> Logout</a>
                </li>
            </ul>
        </div>
    </div>
    </nav>

   <!-- Wallpaper Upload Form Modal -->
    <div id="wallpaperUploadForm" class="modal fade" tabindex="-1" aria-labelledby="wallpaperUploadFormLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="wallpaperUploadFormLabel">Change Wallpaper</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body flex">
                    <!-- Form for updating wallpaper -->
                    <form id="wallpaperForm" action="/update-wallpaper/{{name}}" method="post" enctype="multipart/form-data">
                        <input type="file" name="wallpaper" accept="image/*" required class="form-control">
                        <input type="text" name="name" value="{{name}}" readonly required class="form-control">
                        <button type="submit" class="btn btn-primary">Update Wallpaper</button>
                    </form>
                    <!-- Form for deleting wallpaper -->
                    <form id="deleteWallpaperForm" action="/delete-wallpaper/{{name}}" method="post">
                        <input type="hidden" name="name" value="{{name}}">
                        <button type="submit" id="deletewallpaper" class="btn btn-danger">Delete Wallpaper</button>
                    </form>
                </div>
            </div>
        </div>
    </div>


    <!-- Feedback Modal -->
    <div class="modal fade" id="feedbackModal" tabindex="-1" aria-labelledby="feedbackModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="feedbackModalLabel">Feedback Form</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="feedbackForm" action="/user" method="post">
                        <input type="hidden" id="selectedTab" name="tab" value="">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name:</label>
                            <input type="text" class="form-control" id="name" name="name" value="{{name}}" readonly required>
                        </div>
                        <div class="mb-3">
                            <label>Did you eat?</label>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="ate" id="yes" value="yes" required>
                                <label class="form-check-label" for="yes">Yes</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="ate" id="no" value="no" required>
                                <label class="form-check-label" for="no">No</label>
                            </div>
                        </div>
                        <div class="mb-3" id="reasonGroup" style="display: none;">
                            <label for="reason" class="form-label">Reason for not eating:</label>
                            <textarea type="text" class="form-control" id="reason" name="reason" placeholder="Enter the reason"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="tablets" class="form-label">Have you taken your tablets?</label>
                            <select class="form-control" id="tablets" name="tablets" required>
                                <option value="" disabled selected>Select an option</option>
                                <option value="yes_taken">Yes, I have taken them</option>
                                <option value="yes_not_taken">Yes, but I have not taken them</option>
                                <option value="no">No, I don't have</option>
                            </select>
                        </div>
                        <button type="submit" id="submitBtn" class="btn btn-primary">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    {{!-- <div id="chatIcon" class="position-fixed bottom-0 end-0 m-3" style="cursor: pointer;"> --}}
        {{!-- <i class="fas fa-comment-dots fa-3x"></i> --}}
    {{!-- </div> --}}
    <!-- Logout Modal -->
    <div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="logoutModalLabel"><i class="fas fa-power-off fa-xs"></i> Logout</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to logout?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="confirmLogout" class="btn btn-primary">Logout</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
       // document.getElementById('chatIcon').addEventListener('click', function() {
            // Replace 'chatAppUrl' with the URL of your chat app
         //   window.location.href = 'userChat';
        //});
     document.addEventListener('DOMContentLoaded', async function () {
        function setSelectedTab(tabName) {
        document.getElementById('selectedTab').value = tabName;
    }

    // Function to update tab availability based on current time and user data
    async function updateTabAvailability() {
        const today = new Date().setHours(0, 0, 0, 0);
        const timeRanges = [
            { tab: 'breakfast', start: [9, 0], end: [12, 0], disabled: false },
            { tab: 'lunch', start: [12, 30], end: [16, 0], disabled: false },
            { tab: 'supper', start: [19, 0], end: [22, 0], disabled: false }
        ];

        for (let range of timeRanges) {
            let tabElement = document.getElementById(range.tab + '-tab');
            const hasSubmittedFormToday = userData.tab[range.tab].some(form => {
                return new Date(form.timestamp).setHours(0, 0, 0, 0) === today;
            });

            if (checkTimeRange(...range.start, ...range.end) && !hasSubmittedFormToday) {
                tabElement.classList.remove('disabled');
                tabElement.classList.add('active');
                setSelectedTab(range.tab);
                userData.tabStates[range.tab] = { disabled: false, active: true };
            } else if ((checkTimeRange(...range.start, ...range.end) && hasSubmittedFormToday) || (!checkTimeRange(...range.start, ...range.end) && hasSubmittedFormToday)) {
                tabElement.classList.add('disabled');
                tabElement.classList.add('green-tab');
                userData.tabStates[range.tab] = { disabled: true, greenTab: true };
            } else {
                tabElement.classList.add('disabled');
                tabElement.classList.remove('green-tab');
                userData.tabStates[range.tab] = { disabled: true, greenTab: false };
            }
        }

        // Store the updated tab states in the database for the current user
        await fetch('/updateTabStates', {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: userData.name,
                tabStates: userData.tabStates
            })
        });
    }

    function checkTimeRange(startHour, startMin, endHour, endMin) {
        var now = new Date();
        var start = new Date(now).setHours(startHour, startMin);
        var end = new Date(now).setHours(endHour, endMin);
        return now >= start && now <= end;
    }

    let userData = {};
    try {
        const response = await fetch('/userdata', {
            method: 'GET',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error('Failed to fetch user data from the session');
        }

        userData = await response.json();
        console.log('User data:', userData);

        // Ensure tabStates is initialized
        if (!userData.tabStates) {
            userData.tabStates = {
                breakfast: { disabled: true, greenTab: false, active: false },
                lunch: { disabled: true, greenTab: false, active: false },
                supper: { disabled: true, greenTab: false, active: false }
            };
        }

        // Call the function to update tab availability after fetching user data
        updateTabAvailability();
    } catch (error) {
        console.error('Error fetching user data:', error);
    }

  
    document.getElementById('deleteWallpaperForm').addEventListener('submit', function (e) {
        e.preventDefault();
        var formData = new FormData(this);

        fetch(this.action, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json()) // Ensure the response is parsed as JSON
        .then(data => {
            if (data.success) {
            console.log(data.success)
            const localStorageKey = `wallpaperUrl_${data.username}`;
            console.log(`Removing localStorage key: ${localStorageKey}`);
            // Remove the wallpaper URL from localStorage using the username
            localStorage.removeItem(localStorageKey);
            // Check if the item has been removed
            const removedItem = localStorage.getItem(localStorageKey);
            if (removedItem === null) {
                console.log('Item removed successfully from localStorage');
                window.location.href = '/user';
            } else {
                console.error('Failed to remove item from localStorage');
            }
            window.location.href = 'user';
        } else {
            console.error('Failed to delete wallpaper');
        }
       // formData.reset();
            
        })
        .catch(error => {
            console.error('Error:', error);
        });
    });

    document.getElementById('update-wallpaper-tab').addEventListener('click', function () {
            document.getElementById('wallpaperUploadForm').style.display = 'block';
        });

    document.getElementById('wallpaperForm').addEventListener('submit', function (e) {
        e.preventDefault();
        var formData = new FormData(this);

        fetch(this.action, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json()) // Ensure the response is parsed as JSON
        .then(data => {
            console.log(data);
            const cacheBuster = Math.random();
            // Set the background image dynamically using the received username and extension
            document.body.style.backgroundImage = `url('/uploads/${data.username}_wallpaper${data.fileExtension}?${cacheBuster}')`;
            document.body.style.backgroundRepeat = 'no-repeat';
            document.body.style.backgroundPosition = 'center';
            document.body.style.backgroundSize = 'auto';
            // Save the wallpaper image URL in local storage with a unique key for each user
            localStorage.setItem(`wallpaperUrl_${data.username}`, `/uploads/${data.username}_wallpaper${data.fileExtension}`);
            window.location.href='user'
       //     formData.reset()
        })
        .catch(error => {
            console.error('Error:', error);
        });
    });

    // Retrieve wallpaper image URL from local storage and set background image
    const username = "{{name}}"; // Replace with the actual username
    const wallpaperUrl = localStorage.getItem(`wallpaperUrl_${username}`);
        if (wallpaperUrl) {
            document.body.style.backgroundImage = `url('${wallpaperUrl}')`;
        }
        else {
            document.body.classList.add('default-background');
        }
 
    const errorMessage = "{{error}}";
        if (errorMessage) {
            var errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
            errorModal.show();
        }
    
    const successMessage = "{{success}}";
        if (successMessage) {
            var successModal = new bootstrap.Modal(document.getElementById('successModal'));
            successModal.show();
        }
    document.querySelectorAll('input[name="ate"]').forEach(function (radio) {
        radio.addEventListener('change', function () {
            if (this.value == 'no') {
                document.getElementById('reasonGroup').style.display = 'block';
                document.getElementById('reason').required = true;
            } else {
                document.getElementById('reasonGroup').style.display = 'none';
                document.getElementById('reason').required = false;
                if (this.value == 'yes') {
                    alert("Good! Continue doing your work.");
                }
            }
        });
    });
    

    document.getElementById('feedbackForm').addEventListener('submit', function (e) {
        var tablets = document.getElementById('tablets').value;
        var ate = document.querySelector('input[name="ate"]:checked').value;
        var reason = document.getElementById('reason').value;

        if (tablets === 'yes_not_taken') {
            alert('Please take the tablets as prescribed.');
            //e.preventDefault();
            return;
        }

        // Log the values to the console (you can remove this in production)
        console.log('ate:', ate);
        console.log('reason:', reason);
        console.log('tablets:', tablets);

        // Show thank you message and hide modal after a short delay
        setTimeout(function x () {
            alert("Thank you for taking the time to fill this... Have a nice day!");
            var feedbackModal = bootstrap.Modal.getInstance(document.getElementById('feedbackModal'));
            feedbackModal.hide();
            // Reset the form after a short delay to ensure values are submitted
            setTimeout(resetForm, 1000);
            // Update tab availability after a short delay to ensure values are submitted
            setTimeout(updateTabAvailability, 1000);
        }, 1000);
    });

    function resetForm() {
        document.getElementById('feedbackForm').reset();
        document.getElementById('reasonGroup').style.display = 'none';
    }

    document.getElementById('confirmLogout').addEventListener('click', function () {
        window.location.href = "/logout";
    });
});
    </script>

</body>
</html>



